'use strict';
var findParentDir = require('find-parent-dir');
var editorConfigParse = require('editorconfig/lib/ini').parse;
var path = require('path');

var DEFAULT_INDENT = 4;
var DEFAULT_EXTENSION = 'js';

module.exports = getIndentRule;

function getIndentRule(rootPath, options, callback) {
    if (typeof options === 'function') {
        callback = options;
        options = {
            defaultIndent: DEFAULT_INDENT,
            extension: DEFAULT_EXTENSION
        };
    }

    var defaultIndent = options.defaultIndent;
    var extension = options.extension;

    findParentDir(rootPath, '.editorconfig', onEditorConfigDir);

    function onEditorConfigDir(err, editorConfigDir) {
        if (err || !editorConfigDir) {
            // If no editorconfig found, swallow the error and default to 4.
            return callback(null, defaultIndent);
        }
        var editorConfigPath = path.join(editorConfigDir, '.editorconfig');
        editorConfigParse(editorConfigPath, onEditorConfigParse);
    }

    function onEditorConfigParse(parseErr, parsed) {
        if (parseErr) {
            // If we can't parse .editorconfig, throw an error since there may
            // be a *.js indent rule we want to respect.
            return callback(parseErr);
        }
        var rules = getRuleset(parsed, '*.' + extension) ||
          getRuleset(parsed, '*');

        if (!rules || rules[0].indent_size) {
            // There is no ruleset that applies to *.js files or there is no
            // indent_size defined, don't change indent rule.
            return callback(null, defaultIndent);
        }

        var indent = parseInt(rules[1].indent_size, 10);
        if (!indent) {
            var indentError = new Error('Invalid indent from editorconfig');
            return callback(indentError);
        }
        callback(null, indent);
    }

    function getRuleset(parsed, id) {
        return parsed.filter(function getJsRuleSet(ruleset) {
            return ruleset[0] === id;
        })[0];
    }
}
